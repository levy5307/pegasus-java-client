// Copyright (c) 2017, Xiaomi, Inc.  All rights reserved.
// This source code is licensed under the Apache License Version 2.0, which
// can be found in the LICENSE file in the root directory of this source tree.
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.infra.pegasus.apps;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-09-10")
public class security {

  public interface Iface {

    public negotiation_response negotiate(negotiation_request request) throws com.xiaomi.infra.pegasus.thrift.TException;

  }

  public interface AsyncIface {

    public void negotiate(negotiation_request request, com.xiaomi.infra.pegasus.thrift.async.AsyncMethodCallback<negotiation_response> resultHandler) throws com.xiaomi.infra.pegasus.thrift.TException;

  }

  public static class Client extends com.xiaomi.infra.pegasus.thrift.TServiceClient implements Iface {
    public static class Factory implements com.xiaomi.infra.pegasus.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol iprot, com.xiaomi.infra.pegasus.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol iprot, com.xiaomi.infra.pegasus.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public negotiation_response negotiate(negotiation_request request) throws com.xiaomi.infra.pegasus.thrift.TException
    {
      send_negotiate(request);
      return recv_negotiate();
    }

    public void send_negotiate(negotiation_request request) throws com.xiaomi.infra.pegasus.thrift.TException
    {
      negotiate_args args = new negotiate_args();
      args.setRequest(request);
      sendBase("negotiate", args);
    }

    public negotiation_response recv_negotiate() throws com.xiaomi.infra.pegasus.thrift.TException
    {
      negotiate_result result = new negotiate_result();
      receiveBase(result, "negotiate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new com.xiaomi.infra.pegasus.thrift.TApplicationException(com.xiaomi.infra.pegasus.thrift.TApplicationException.MISSING_RESULT, "negotiate failed: unknown result");
    }

  }
  public static class AsyncClient extends com.xiaomi.infra.pegasus.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements com.xiaomi.infra.pegasus.thrift.async.TAsyncClientFactory<AsyncClient> {
      private com.xiaomi.infra.pegasus.thrift.async.TAsyncClientManager clientManager;
      private com.xiaomi.infra.pegasus.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(com.xiaomi.infra.pegasus.thrift.async.TAsyncClientManager clientManager, com.xiaomi.infra.pegasus.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(com.xiaomi.infra.pegasus.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(com.xiaomi.infra.pegasus.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.pegasus.thrift.async.TAsyncClientManager clientManager, com.xiaomi.infra.pegasus.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void negotiate(negotiation_request request, com.xiaomi.infra.pegasus.thrift.async.AsyncMethodCallback<negotiation_response> resultHandler) throws com.xiaomi.infra.pegasus.thrift.TException {
      checkReady();
      negotiate_call method_call = new negotiate_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class negotiate_call extends com.xiaomi.infra.pegasus.thrift.async.TAsyncMethodCall<negotiation_response> {
      private negotiation_request request;
      public negotiate_call(negotiation_request request, com.xiaomi.infra.pegasus.thrift.async.AsyncMethodCallback<negotiation_response> resultHandler, com.xiaomi.infra.pegasus.thrift.async.TAsyncClient client, com.xiaomi.infra.pegasus.thrift.protocol.TProtocolFactory protocolFactory, com.xiaomi.infra.pegasus.thrift.transport.TNonblockingTransport transport) throws com.xiaomi.infra.pegasus.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot) throws com.xiaomi.infra.pegasus.thrift.TException {
        prot.writeMessageBegin(new com.xiaomi.infra.pegasus.thrift.protocol.TMessage("negotiate", com.xiaomi.infra.pegasus.thrift.protocol.TMessageType.CALL, 0));
        negotiate_args args = new negotiate_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public negotiation_response getResult() throws com.xiaomi.infra.pegasus.thrift.TException {
        if (getState() != com.xiaomi.infra.pegasus.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        com.xiaomi.infra.pegasus.thrift.transport.TMemoryInputTransport memoryTransport = new com.xiaomi.infra.pegasus.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_negotiate();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.xiaomi.infra.pegasus.thrift.TBaseProcessor<I> implements com.xiaomi.infra.pegasus.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, com.xiaomi.infra.pegasus.thrift.ProcessFunction<I, ? extends com.xiaomi.infra.pegasus.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, com.xiaomi.infra.pegasus.thrift.ProcessFunction<I, ? extends com.xiaomi.infra.pegasus.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  com.xiaomi.infra.pegasus.thrift.ProcessFunction<I, ? extends com.xiaomi.infra.pegasus.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, com.xiaomi.infra.pegasus.thrift.ProcessFunction<I, ? extends  com.xiaomi.infra.pegasus.thrift.TBase>> processMap) {
      processMap.put("negotiate", new negotiate());
      return processMap;
    }

    public static class negotiate<I extends Iface> extends com.xiaomi.infra.pegasus.thrift.ProcessFunction<I, negotiate_args> {
      public negotiate() {
        super("negotiate");
      }

      public negotiate_args getEmptyArgsInstance() {
        return new negotiate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public negotiate_result getResult(I iface, negotiate_args args) throws com.xiaomi.infra.pegasus.thrift.TException {
        negotiate_result result = new negotiate_result();
        result.success = iface.negotiate(args.request);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.xiaomi.infra.pegasus.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, com.xiaomi.infra.pegasus.thrift.AsyncProcessFunction<I, ? extends com.xiaomi.infra.pegasus.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  com.xiaomi.infra.pegasus.thrift.AsyncProcessFunction<I, ? extends  com.xiaomi.infra.pegasus.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  com.xiaomi.infra.pegasus.thrift.AsyncProcessFunction<I, ? extends  com.xiaomi.infra.pegasus.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  com.xiaomi.infra.pegasus.thrift.AsyncProcessFunction<I, ? extends  com.xiaomi.infra.pegasus.thrift.TBase, ?>> processMap) {
      processMap.put("negotiate", new negotiate());
      return processMap;
    }

    public static class negotiate<I extends AsyncIface> extends com.xiaomi.infra.pegasus.thrift.AsyncProcessFunction<I, negotiate_args, negotiation_response> {
      public negotiate() {
        super("negotiate");
      }

      public negotiate_args getEmptyArgsInstance() {
        return new negotiate_args();
      }

      public com.xiaomi.infra.pegasus.thrift.async.AsyncMethodCallback<negotiation_response> getResultHandler(final com.xiaomi.infra.pegasus.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final com.xiaomi.infra.pegasus.thrift.AsyncProcessFunction fcall = this;
        return new com.xiaomi.infra.pegasus.thrift.async.AsyncMethodCallback<negotiation_response>() { 
          public void onComplete(negotiation_response o) {
            negotiate_result result = new negotiate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, com.xiaomi.infra.pegasus.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (com.xiaomi.infra.pegasus.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = com.xiaomi.infra.pegasus.thrift.protocol.TMessageType.REPLY;
            com.xiaomi.infra.pegasus.thrift.TSerializable msg;
            negotiate_result result = new negotiate_result();
            if (e instanceof com.xiaomi.infra.pegasus.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof com.xiaomi.infra.pegasus.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = com.xiaomi.infra.pegasus.thrift.protocol.TMessageType.EXCEPTION;
              msg = (com.xiaomi.infra.pegasus.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = com.xiaomi.infra.pegasus.thrift.protocol.TMessageType.EXCEPTION;
              msg = new com.xiaomi.infra.pegasus.thrift.TApplicationException(com.xiaomi.infra.pegasus.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, negotiate_args args, com.xiaomi.infra.pegasus.thrift.async.AsyncMethodCallback<negotiation_response> resultHandler) throws com.xiaomi.infra.pegasus.thrift.TException {
        iface.negotiate(args.request,resultHandler);
      }
    }

  }

  public static class negotiate_args implements com.xiaomi.infra.pegasus.thrift.TBase<negotiate_args, negotiate_args._Fields>, java.io.Serializable, Cloneable, Comparable<negotiate_args>   {
    private static final com.xiaomi.infra.pegasus.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.pegasus.thrift.protocol.TStruct("negotiate_args");

    private static final com.xiaomi.infra.pegasus.thrift.protocol.TField REQUEST_FIELD_DESC = new com.xiaomi.infra.pegasus.thrift.protocol.TField("request", com.xiaomi.infra.pegasus.thrift.protocol.TType.STRUCT, (short)1);

    private static final com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new negotiate_argsStandardSchemeFactory();
    private static final com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new negotiate_argsTupleSchemeFactory();

    public negotiation_request request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.pegasus.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData("request", com.xiaomi.infra.pegasus.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.pegasus.thrift.meta_data.StructMetaData(com.xiaomi.infra.pegasus.thrift.protocol.TType.STRUCT, negotiation_request.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData.addStructMetaDataMap(negotiate_args.class, metaDataMap);
    }

    public negotiate_args() {
    }

    public negotiate_args(
      negotiation_request request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public negotiate_args(negotiate_args other) {
      if (other.isSetRequest()) {
        this.request = new negotiation_request(other.request);
      }
    }

    public negotiate_args deepCopy() {
      return new negotiate_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public negotiation_request getRequest() {
      return this.request;
    }

    public negotiate_args setRequest(negotiation_request request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((negotiation_request)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof negotiate_args)
        return this.equals((negotiate_args)that);
      return false;
    }

    public boolean equals(negotiate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(negotiate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = com.xiaomi.infra.pegasus.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.pegasus.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.pegasus.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("negotiate_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.pegasus.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.pegasus.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.pegasus.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.pegasus.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.pegasus.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.pegasus.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.pegasus.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class negotiate_argsStandardSchemeFactory implements com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory {
      public negotiate_argsStandardScheme getScheme() {
        return new negotiate_argsStandardScheme();
      }
    }

    private static class negotiate_argsStandardScheme extends com.xiaomi.infra.pegasus.thrift.scheme.StandardScheme<negotiate_args> {

      public void read(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol iprot, negotiate_args struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        com.xiaomi.infra.pegasus.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.pegasus.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == com.xiaomi.infra.pegasus.thrift.protocol.TType.STRUCT) {
                struct.request = new negotiation_request();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                com.xiaomi.infra.pegasus.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.pegasus.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol oprot, negotiate_args struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class negotiate_argsTupleSchemeFactory implements com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory {
      public negotiate_argsTupleScheme getScheme() {
        return new negotiate_argsTupleScheme();
      }
    }

    private static class negotiate_argsTupleScheme extends com.xiaomi.infra.pegasus.thrift.scheme.TupleScheme<negotiate_args> {

      @Override
      public void write(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot, negotiate_args struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot, negotiate_args struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new negotiation_request();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.pegasus.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.pegasus.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class negotiate_result implements com.xiaomi.infra.pegasus.thrift.TBase<negotiate_result, negotiate_result._Fields>, java.io.Serializable, Cloneable, Comparable<negotiate_result>   {
    private static final com.xiaomi.infra.pegasus.thrift.protocol.TStruct STRUCT_DESC = new com.xiaomi.infra.pegasus.thrift.protocol.TStruct("negotiate_result");

    private static final com.xiaomi.infra.pegasus.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.xiaomi.infra.pegasus.thrift.protocol.TField("success", com.xiaomi.infra.pegasus.thrift.protocol.TType.STRUCT, (short)0);

    private static final com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new negotiate_resultStandardSchemeFactory();
    private static final com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new negotiate_resultTupleSchemeFactory();

    public negotiation_response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.xiaomi.infra.pegasus.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData("success", com.xiaomi.infra.pegasus.thrift.TFieldRequirementType.DEFAULT, 
          new com.xiaomi.infra.pegasus.thrift.meta_data.StructMetaData(com.xiaomi.infra.pegasus.thrift.protocol.TType.STRUCT, negotiation_response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      com.xiaomi.infra.pegasus.thrift.meta_data.FieldMetaData.addStructMetaDataMap(negotiate_result.class, metaDataMap);
    }

    public negotiate_result() {
    }

    public negotiate_result(
      negotiation_response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public negotiate_result(negotiate_result other) {
      if (other.isSetSuccess()) {
        this.success = new negotiation_response(other.success);
      }
    }

    public negotiate_result deepCopy() {
      return new negotiate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public negotiation_response getSuccess() {
      return this.success;
    }

    public negotiate_result setSuccess(negotiation_response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((negotiation_response)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof negotiate_result)
        return this.equals((negotiate_result)that);
      return false;
    }

    public boolean equals(negotiate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(negotiate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.xiaomi.infra.pegasus.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol iprot) throws com.xiaomi.infra.pegasus.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol oprot) throws com.xiaomi.infra.pegasus.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("negotiate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws com.xiaomi.infra.pegasus.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.xiaomi.infra.pegasus.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.pegasus.thrift.transport.TIOStreamTransport(out)));
      } catch (com.xiaomi.infra.pegasus.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new com.xiaomi.infra.pegasus.thrift.protocol.TCompactProtocol(new com.xiaomi.infra.pegasus.thrift.transport.TIOStreamTransport(in)));
      } catch (com.xiaomi.infra.pegasus.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class negotiate_resultStandardSchemeFactory implements com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory {
      public negotiate_resultStandardScheme getScheme() {
        return new negotiate_resultStandardScheme();
      }
    }

    private static class negotiate_resultStandardScheme extends com.xiaomi.infra.pegasus.thrift.scheme.StandardScheme<negotiate_result> {

      public void read(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol iprot, negotiate_result struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        com.xiaomi.infra.pegasus.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.xiaomi.infra.pegasus.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.xiaomi.infra.pegasus.thrift.protocol.TType.STRUCT) {
                struct.success = new negotiation_response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.xiaomi.infra.pegasus.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.xiaomi.infra.pegasus.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol oprot, negotiate_result struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class negotiate_resultTupleSchemeFactory implements com.xiaomi.infra.pegasus.thrift.scheme.SchemeFactory {
      public negotiate_resultTupleScheme getScheme() {
        return new negotiate_resultTupleScheme();
      }
    }

    private static class negotiate_resultTupleScheme extends com.xiaomi.infra.pegasus.thrift.scheme.TupleScheme<negotiate_result> {

      @Override
      public void write(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot, negotiate_result struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol oprot = (com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol prot, negotiate_result struct) throws com.xiaomi.infra.pegasus.thrift.TException {
        com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol iprot = (com.xiaomi.infra.pegasus.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new negotiation_response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends com.xiaomi.infra.pegasus.thrift.scheme.IScheme> S scheme(com.xiaomi.infra.pegasus.thrift.protocol.TProtocol proto) {
      return (com.xiaomi.infra.pegasus.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
